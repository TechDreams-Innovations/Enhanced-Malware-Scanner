import os
import hashlib
import psutil
import yara
import logging
from logging.handlers import RotatingFileHandler
import argparse
from datetime import datetime

YARA_RULES_FILE = "./rules.yar"
LOG_FILE = "./malware_scan.log"
handler = RotatingFileHandler(LOG_FILE, maxBytes=5 * 1024 * 1024, backupCount=2)
logging.basicConfig(
    handlers=[handler],
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
)
logging.info("Malware Scanner Started")

try:
    yara_rules = yara.compile(filepath=YARA_RULES_FILE)
    logging.info("YARA rules loaded successfully!")
except Exception as e:
    logging.error(f"Error loading YARA rules: {e}")
    yara_rules = None

def load_known_hashes(hash_file="malware_hashes.txt"):
    try:
        with open(hash_file, "r") as f:
            return [line.strip() for line in f if line.strip()]
    except FileNotFoundError:
        logging.warning(f"Hash file {hash_file} not found. Using empty hash list.")
        return []

KNOWN_MALWARE_HASHES = load_known_hashes()

def calculate_md5(file_path):
    try:
        with open(file_path, "rb") as file:
            file_hash = hashlib.md5()
            while chunk := file.read(8192):
                file_hash.update(chunk)
            return file_hash.hexdigest()
    except (PermissionError, FileNotFoundError) as e:
        logging.error(f"Permission error or file not found: {file_path} - {e}")
        return None
    except Exception as e:
        logging.error(f"Unexpected error reading file {file_path}: {e}")
        return None

def scan_with_yara(file_path):
    if yara_rules:
        try:
            matches = yara_rules.match(filepath=file_path)
            if matches:
                logging.warning(f"YARA detected suspicious file: {file_path}")
                return True
        except Exception as e:
            logging.error(f"Error scanning file {file_path} with YARA: {e}")
    return False

def scan_directory(directory, max_files=100000):
    logging.info(f"Scanning directory: {directory}")
    suspicious_files = []
    file_count = 0
    try:
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                file_count += 1
                if file_count > max_files:
                    logging.warning(f"File limit reached: {max_files}")
                    return suspicious_files
                file_hash = calculate_md5(file_path)
                if file_hash in KNOWN_MALWARE_HASHES:
                    logging.warning(f"Known malware detected: {file_path}")
                    suspicious_files.append((file_path, "Hash Match"))
                    continue
                if scan_with_yara(file_path):
                    suspicious_files.append((file_path, "YARA Match"))
    except Exception as e:
        logging.error(f"Error scanning directory: {e}")
    return suspicious_files

def monitor_processes():
    logging.info("Monitoring running processes...")
    suspicious_processes = []
    for process in psutil.process_iter(attrs=["pid", "name", "exe"]):
        try:
            process_info = process.info
            process_name = process_info.get("name", "")
            process_path = process_info.get("exe", "")
            if process_path and scan_with_yara(process_path):
                logging.warning(f"Suspicious process detected: {process_name} (PID: {process_info['pid']})")
                suspicious_processes.append(process_info)
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            continue
    return suspicious_processes

def main():
    parser = argparse.ArgumentParser(description="Malware Scanner")
    parser.add_argument("-d", "--directory", help="Directory to scan", default=os.path.expanduser("~"))
    parser.add_argument("-m", "--max-files", type=int, help="Maximum number of files to scan", default=100000)
    args = parser.parse_args()

    directory_to_scan = args.directory
    max_files = args.max_files

    suspicious_files = scan_directory(directory_to_scan, max_files)
    suspicious_processes = monitor_processes()

    if suspicious_files or suspicious_processes:
        print("\nScan complete. Suspicious files and processes found:")
        for file, reason in suspicious_files:
            print(f"File: {file} ({reason})")
            logging.info(f"Suspicious file: {file} ({reason})")
        for process in suspicious_processes:
            print(f"Process: {process['name']} (PID: {process['pid']})")
            logging.info(f"Suspicious process: {process}")
    else:
        print("\nScan complete! No suspicious files or processes found.")
        logging.info("No suspicious files or processes found.")

if __name__ == "__main__":
    main()
